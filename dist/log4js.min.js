"use strict";
/** LOG4JS - Browser log management. 
 *
 * @license MIT
 * @author Damien Cuvillier <damien@gotan.io>
 * @see https://github.com/GotanKit/log4js#readme
 */class Log4JS{constructor(specificConfiguration,loggerName){try{if(__log4jsInstances==null){__log4jsInstances=new Array}__log4jsInstances[Log4JS.LAUNCHING_INSTANCE_IDENTIFIER]=this;this.LEVELS=Log4JS.LEVELS;this._loadDefaultConfig();if(typeof specificConfiguration=="object"){this._loadConfig(specificConfiguration)}if(loggerName==null){loggerName="default"}if(!this.CONFIG.LIVE&&this.CONFIG.FILE==null){throw`Log4JS ${loggerName} is useless : you must set either a filename, or set live parameter to true`}if(this.CONFIG.DEBUG){this.trace("LOG4JS instanciated");if(typeof moment=="undefined"){this.warn("MomentJS is not available. Dates will be not displayed in right format")}}if(this._isFileFeatureActive()){this.trace("Init filesystem logging");this._outfile=new debugout;this._outfile.realTimeLoggingOn=false;this._outfile.useTimestamps=false;this._outfile.recordLogs=true;this._outfile.maxLines=2500;this._outfile.autoTrim=true;this._outfile.tailNumLines=100;this._outfile.logFilename=this.CONFIG.FILE;if(this.CONFIG.DEBUG){this.debug(`Started debugout file storing`)}}if(__log4jsInstances[loggerName]!=null){throw new Exception(`Unable to launch 2 logger with the same name '${loggerName}'`)}__log4jsInstances[loggerName]=this}finally{if(!this._isFileFeatureActive()){this._removeLaunchingInstance()}}}_loadDefaultConfig(){this.CONFIG={LEVEL:this.LEVELS.WARN,FILE:null,PRINT:false,PREFIX:"",DATE_FORMAT:"YYYYMMDD-HHmmss",LIVE:false}}_loadConfig(config){if(typeof config.level!="undefined"){this.CONFIG.LEVEL=config.level}if(typeof config.file!="undefined"){this.CONFIG.FILE=config.file}if(typeof config.prefix!="undefined"){this.CONFIG.PREFIX=config.prefix}if(typeof config.date_format!="undefined"){this.CONFIG.DATE_FORMAT=config.date_format}if(typeof config.debug!="undefined"){this.CONFIG.DEBUG=config.debug}if(typeof config.live!="undefined"){this.CONFIG.LIVE=config.live}}_log(level,message,avoidFormat,onlyConsole){if(onlyConsole==null){onlyConsole=false}if(typeof moment!="undefined"){var date=moment().format(this.CONFIG.DATE_FORMAT)}else{var date=(new Date).toLocaleString()}var enabled=level>=this.CONFIG.LEVEL;if(!enabled){return}var levelLabel=Object.keys(this.LEVELS)[level];if(typeof message=="object"){var title=`${this.CONFIG.PREFIX}${date} [${levelLabel}] ${message[0]}`;console.group(title);message.shift();for(var i=0;i<message.length;i++){this._log(level,message[i],true,true)}console.groupEnd();if(this._isFileFeatureActive()&&!onlyConsole){this._appendLogFile(title+"\n\t"+message.join("\n\t"))}return}if(avoidFormat==null||avoidFormat==false){message=`${this.CONFIG.PREFIX}${date} [${levelLabel}] ${message}`}if(this.CONFIG.LIVE){switch(level){case this.LEVELS.FATAL:message=console.error("%c"+message,"background: red; color: yellow; font-size: x-large");break;case this.LEVELS.ERROR:console.error("%c"+message,"font-weight:bold");break;case this.LEVELS.WARN:console.warn("%c"+message,"font-weight:bold;");break;case this.LEVELS.INFO:console.info(message);break;case this.LEVELS.DEBUG:console.log(message);break;case this.LEVELS.TRACE:console.log("%c"+message,"font-size: smaller; color:#888");break}}if(this._isFileFeatureActive()&&!onlyConsole){this._appendLogFile(message)}}trace(message){this._log(this.LEVELS.TRACE,message)}debug(message){this._log(this.LEVELS.DEBUG,message)}info(message){this._log(this.LEVELS.INFO,message)}warn(message){this._log(this.LEVELS.WARN,message)}error(message){this._log(this.LEVELS.ERROR,message)}fatal(message){this._log(this.LEVELS.FATAL,message)}downloadFile(){this._checkDebugout();this._outfile.downloadLog()}search(searchTerm){this._checkDebugout();return this._outfile.search(searchTerm)}tail(numLines){this._checkDebugout();return this._outfile.tail(numLines)}printLog(){this._checkDebugout();console.log(this._outfile.getLog())}clearFile(){this._checkDebugout();this._outfile.clear()}_checkDebugout(){if(this._outfile==null||!this._outfile instanceof debugout){throw"'file' log4js parameter is null. Log storage is disabled. This feature is not available"}}_appendLogFile(message){if(this._outfile instanceof debugout){this._log(Log4JS.LEVELS.TRACE,`Wrote a message to log file ${this.CONFIG.FILE}`,false,true);this._outfile.log(message)}}static getLogInstance(loggerName){if(__log4jsInstances==null){throw"Log4JS is not yet instanciated. No instance found"}if(typeof __log4jsInstances!="object"){throw"Log4JS instances are corrupted"}if(Object.keys(__log4jsInstances).length==0){throw"Log4JS instances stock is empty"}if(loggerName==null){loggerName=__log4jsInstances["default"]!=null?"default":Object.keys(__log4jsInstances)[0]}if(!__log4jsInstances[loggerName]instanceof Log4JS){throw new Exception(`Log4JS instance ${loggerName} is corrupted`)}return __log4jsInstances[loggerName]}_removeLaunchingInstance(){if(Log4JS.__getLaunchingInstance()!=null){var newInstances=new Array;var keys=Object.keys(__log4jsInstances);for(var i=0;i<keys.length;i++){if(keys[i]!=Log4JS.LAUNCHING_INSTANCE_IDENTIFIER){newInstances[keys[i]]=__log4jsInstances[keys[i]]}}__log4jsInstances=newInstances}}static __getLaunchingInstance(){if(__log4jsInstances==null||Object.keys(__log4jsInstances).indexOf(Log4JS.LAUNCHING_INSTANCE_IDENTIFIER)==-1){return null}return Log4JS.getLogInstance(Log4JS.LAUNCHING_INSTANCE_IDENTIFIER)}_isFileFeatureActive(){return this.CONFIG.FILE!=null}}var __log4jsInstances=null;Object.defineProperty(Log4JS,"LEVELS",{value:{TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,FATAL:5},writable:false,enumerable:true,configurable:false});Object.defineProperty(Log4JS,"LAUNCHING_INSTANCE_IDENTIFIER",{value:"___LAUNCHING_INSTANCE___",writable:false,enumerable:false,configurable:false});